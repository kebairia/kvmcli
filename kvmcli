#!/bin/python
import argparse
import os
import logging
import subprocess

# from misc import *
# from args_gen import *
# from images import *
# import info

import sys
from config import config
from src.info import *
from src.init import *
from src.images import *
from src.misc import print_message
from src.args_gen import load_yaml_data, create_virt_install_args

def run_virt_install(virt_install_args):

    """Run virt-install command with arguments provided"""

    args = ["virt-install"]
    for key, value in virt_install_args.items():
        args.append(f"--{key}")
        if value:
            args.append(value)
    subprocess.run(args)

def process_vm(vm, vm_index):
    """
    Process a single VM definition from the YAML data.
    """
    name = vm['info'].get('name', f"{config.IMAGE_NAME}-{vm_index+1}")

    if name in ignore:
        return
    image = copy_image(name, vm)

    if image['dest_image_exists']:
        print_message("INFO", f"Provisioning a new VM named {name}\n")
        vm_args = create_virt_install_args(vm_index, vm)
        run_virt_install(vm_args)

def apply(yaml_path):
    """
    Load a YAML file from the given file path, parse its content, and provision all the VM listed in it.
    """

    data = load_yaml_data(yaml_path)
    if data is None:
        exit()

    for vm_index, vm in enumerate(data['vms']):
        process_vm(vm, vm_index)

    print_message("INFO", "All VMs provisioned successfully!")


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
                        prog='kvmcli',
                        description='A Python script for managing virtual machines in a KVM-based cluster.',
                        epilog='Enjoy')
    
    parser.add_argument('-I', '--info', action="store_true", help='Print information about your cluster')
    parser.add_argument('-i', '--init', action="store_true", help='Create template file')
    parser.add_argument('-a', '--apply', action="store_true", help='apply configuration from YAML_FILE')
    parser.add_argument('-f', '--file', metavar='YAML_FILE', help='Specify a yaml file')
    parser.add_argument('--ignore', metavar='NODE_NAME', help='Ignore NODE NAME')
    
    args = parser.parse_args()

    if args.init:
        create_template
    if args.file:
        yaml_file = args.file
    else:
        yaml_file = config.YAML_PATH
    if args.ignore:
        ignore = [node.strip() for node in args.ignore.split(',')]
    else: 
        ignore = []
    if args.info:
        report(yaml_file)
    if args.apply:
        apply(yaml_file)
